A design principle is an established idea or best practice that facilitates the software design process.

Following good design principles leads to

  * More logical code
  * Code that is easier to understand
  * Classes that are easier to reuse in other relationships and applications
  * Code that is easier to maintain and that adapts more readily to changes in the application requirements

Some design principles in Java:

1) Encapsulating Data
 * With encapsulation, a class is able to maintain certain invariants about its internal data. An invariant is a 
   property or truth that is maintained even after the data is modified.
   
2) JavaBeans
 * Encapsulation is so prevalent in Java that there is a standard for creating classes that store data, called JavaBeans. 
   A JavaBean is a design principle for encapsulating data in an object in Java. 
   JavaBean naming conventions are listed on page 69, in table 2.1

   Although boolean values use 'is' to start their getter method, the same does not apply to instances of the wrapper Boolean 
   class which use get.
   
   Example:
   
   Suppose you have the following private variables defined in your class:
   
   private boolean playing;
   private boolean dancing;
   
   Which of the following could be correctly included in a JavaBean?
   
   public boolean isPlaying() { return playing; } // Correct
   public boolean getPlaying() { return playing; } // Correct, since boolean may use 'is' or 'get'
   public Boolean isDancing() { return dancing; } // Incorrect, a Boolean wrapper should start with 'get', since it is an Object
   
   
